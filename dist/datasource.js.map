{"version":3,"sources":["../src/datasource.js"],"names":["GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","withCredentials","headers","basicAuth","length","options","query","buildQueryParameters","targets","filter","t","hide","when","data","getAdhocFilters","adhocFilters","doRequest","method","then","response","status","message","title","replace","annotation","annotationQuery","range","datasource","enable","iconColor","rangeRaw","result","interpolated","target","mvId","mapToTextValue","_","map","d","i","text","value","isObject","datasourceRequest","scopedVars","mv","column","key","refId","Promise","resolve","reject"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class GenericDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.headers = {'Content-Type': 'application/json'};\n    if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n      this.headers['Authorization'] = instanceSettings.basicAuth;\n    }\n  }\n\n  query(options) {\n    var query = this.buildQueryParameters(options);\n    query.targets = query.targets.filter(t => !t.hide);\n\n    if (query.targets.length <= 0) {\n      return this.q.when({data: []});\n    }\n\n    if (this.templateSrv.getAdhocFilters) {\n      query.adhocFilters = this.templateSrv.getAdhocFilters(this.name);\n    } else {\n      query.adhocFilters = [];\n    }\n\n    return this.doRequest({\n      url: this.url + '/query',\n      data: query,\n      method: 'POST'\n    });\n  }\n\n  testDatasource() {\n    return this.doRequest({\n      url: this.url + '/',\n      method: 'GET',\n    }).then(response => {\n      if (response.status === 200) {\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n      }\n    });\n  }\n\n  annotationQuery(options) {\n    var query = this.templateSrv.replace(options.annotation.query, {}, 'glob');\n    var annotationQuery = {\n      range: options.range,\n      annotation: {\n        name: options.annotation.name,\n        datasource: options.annotation.datasource,\n        enable: options.annotation.enable,\n        iconColor: options.annotation.iconColor,\n        query: query\n      },\n      rangeRaw: options.rangeRaw\n    };\n\n    return this.doRequest({\n      url: this.url + '/annotations',\n      method: 'POST',\n      data: annotationQuery\n    }).then(result => {\n      return result.data;\n    });\n  }\n\n  listMaterializedViews(query) {\n    var interpolated = {\n        target: this.templateSrv.replace(query, null, 'regex')\n    };\n\n    return this.doRequest({\n      url: this.url + '/list',\n      data: interpolated,\n      method: 'POST',\n    }).then(function(result) {\n      return result.data;\n    });\n  }\n\n  getColumns(query, mvId) {\n    var interpolated = {\n        target: this.templateSrv.replace(query, null, 'regex'),\n        mvId: mvId\n    };\n\n    return this.doRequest({\n      url: this.url + '/columns',\n      data: interpolated,\n      method: 'POST',\n    }).then(this.mapToTextValue);\n  }\n\n  getKeys(query, mvId) {\n    var interpolated = {\n        target: this.templateSrv.replace(query, null, 'regex'),\n        mvId: mvId\n    };\n\n    return this.doRequest({\n      url: this.url + '/keys',\n      data: interpolated,\n      method: 'POST',\n    }).then(this.mapToTextValue);\n  }\n\n  mapToTextValue(result) {\n    return _.map(result.data, (d, i) => {\n      if (d && d.text && d.value) {\n        return { text: d.text, value: d.value };\n      } else if (_.isObject(d)) {\n        return { text: d, value: i};\n      }\n      return { text: d, value: d };\n    });\n  }\n\n  doRequest(options) {\n    options.withCredentials = this.withCredentials;\n    options.headers = this.headers;\n\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  buildQueryParameters(options) {\n    //remove placeholder targets\n    options.targets = _.filter(options.targets, target => {\n      return target.target !== 'select metric';\n    });\n\n    var targets = _.map(options.targets, target => {\n      return {\n        target: this.templateSrv.replace(target.target, options.scopedVars, 'regex'),\n        mvId: this.templateSrv.replace(target.mv, options.scopedVars, 'regex'),\n        column: this.templateSrv.replace(target.column, options.scopedVars, 'regex'),\n        key: this.templateSrv.replace(target.key, options.scopedVars, 'regex'),\n        refId: target.refId,\n        hide: target.hide,\n        type: target.type || 'timeserie'\n      };\n    });\n\n    options.targets = targets;\n\n    return options;\n  }\n\n  getTagKeys(options) {\n    return new Promise((resolve, reject) => {\n      this.doRequest({\n        url: this.url + '/tag-keys',\n        method: 'POST',\n        data: options\n      }).then(result => {\n        return resolve(result.data);\n      });\n    });\n  }\n\n  getTagValues(options) {\n    return new Promise((resolve, reject) => {\n      this.doRequest({\n        url: this.url + '/tag-values',\n        method: 'POST',\n        data: options\n      }).then(result => {\n        return resolve(result.data);\n      });\n    });\n  }\n\n}\n"]}