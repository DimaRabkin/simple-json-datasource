{"version":3,"sources":["../src/query_ctrl.js"],"names":["GenericDatasourceQueryCtrl","$scope","$injector","scope","target","mv","column","key","type","query","datasource","listMaterializedViews","getColumns","rawQuery","panelCtrl","refresh","then","columns","x","onChangeInternal","getKeys","keys","Promise","resolve","QueryCtrl","templateUrl"],"mappings":";;;;;;;;;AAAA;;AACA;;;;;;;;IAEaA,0B,WAAAA,0B;;;AAEX,sCAAYC,MAAZ,EAAoBC,SAApB,EAAgC;AAAA;;AAAA,wJACxBD,MADwB,EAChBC,SADgB;;AAG9B,UAAKC,KAAL,GAAaF,MAAb;AACA,UAAKG,MAAL,CAAYA,MAAZ,GAAqB,MAAKA,MAAL,CAAYA,MAAZ,IAAsB,eAA3C;AACA,UAAKA,MAAL,CAAYC,EAAZ,GAAiB,MAAKD,MAAL,CAAYC,EAAZ,IAAkB,0BAAnC;AACA,UAAKD,MAAL,CAAYE,MAAZ,GAAqB,MAAKF,MAAL,CAAYE,MAAZ,IAAsB,eAA3C;AACA,UAAKF,MAAL,CAAYG,GAAZ,GAAkB,MAAKH,MAAL,CAAYG,GAAZ,IAAmB,YAArC;AACA,UAAKH,MAAL,CAAYI,IAAZ,GAAmB,MAAKJ,MAAL,CAAYI,IAAZ,IAAoB,WAAvC;AAR8B;AAS/B;;;;0CAEqBC,K,EAAO;AAC3B,aAAO,KAAKC,UAAL,CAAgBC,qBAAhB,CAAsCF,SAAS,EAA/C,CAAP;AACD;;;+BAEUA,K,EAAO;AACf,aAAO,KAAKL,MAAL,CAAYC,EAAZ,KAAmB,0BAAnB,GAAgD,KAAKK,UAAL,CAAgBE,UAAhB,CAA2BH,SAAS,EAApC,EAAwC,KAAKL,MAAL,CAAYC,EAApD,CAAhD,GAA0G,EAAjH;AACF;;;uCAEkB;AACjB,WAAKD,MAAL,CAAYS,QAAZ,GAAuB,CAAC,KAAKT,MAAL,CAAYS,QAApC;AACD;;;uCAEkB;AACjB,WAAKC,SAAL,CAAeC,OAAf,GADiB,CACS;AAC3B;;;8BAES;AAAA;;AACR,WAAKH,UAAL,CAAgB,EAAhB,EAAoBI,IAApB,CAAyB,aAAK;AAC5B,eAAKZ,MAAL,CAAYa,OAAZ,GAAsBC,CAAtB;AACA,eAAKC,gBAAL;AACD,OAHD;AAIA,WAAKC,OAAL,CAAa,EAAb,EAAiBJ,IAAjB,CAAsB,aAAK;AACzB,eAAKZ,MAAL,CAAYiB,IAAZ,GAAmBH,CAAnB;AACA,eAAKC,gBAAL;AACD,OAHD;AAID;;;4BAEOV,K,EAAO;AACb,aAAO,KAAKL,MAAL,CAAYC,EAAZ,KAAmB,0BAAnB,GAAgD,KAAKK,UAAL,CAAgBU,OAAhB,CAAwBX,SAAS,EAAjC,EAAqC,KAAKL,MAAL,CAAYC,EAAjD,CAAhD,GAAuG,EAA9G;AACD;;;6BAEQI,K,EAAO;AACd,aAAOa,QAAQC,OAAR,CAAgB,KAAKnB,MAAL,CAAYiB,IAA5B,KAAqC,KAAKD,OAAL,CAAaX,KAAb,CAA5C;AACD;;;uCAEkB,CAElB;;;gCAEWA,K,EAAO;AACjB,aAAOa,QAAQC,OAAR,CAAgB,KAAKnB,MAAL,CAAYa,OAA5B,KAAwC,KAAKL,UAAL,CAAgBH,KAAhB,CAA/C;AACD;;;;EAtD6Ce,c;;AAyDhDxB,2BAA2ByB,WAA3B,GAAyC,4BAAzC","file":"query_ctrl.js","sourcesContent":["import {QueryCtrl} from 'app/plugins/sdk';\nimport './css/query-editor.css!'\n\nexport class GenericDatasourceQueryCtrl extends QueryCtrl {\n\n  constructor($scope, $injector)  {\n    super($scope, $injector);\n\n    this.scope = $scope;\n    this.target.target = this.target.target || 'select metric';\n    this.target.mv = this.target.mv || 'Select Materialized View';\n    this.target.column = this.target.column || 'Select Column';\n    this.target.key = this.target.key || 'Select Key';\n    this.target.type = this.target.type || 'timeserie';\n  }\n\n  listMaterializedViews(query) {\n    return this.datasource.listMaterializedViews(query || '');\n  }\n\n  getColumns(query) {\n     return this.target.mv !== 'Select Materialized View' ? this.datasource.getColumns(query || '', this.target.mv) : [];\n  }\n\n  toggleEditorMode() {\n    this.target.rawQuery = !this.target.rawQuery;\n  }\n\n  onChangeInternal() {\n    this.panelCtrl.refresh(); // Asks the panel to refresh data.\n  }\n\n  onSetMv() {\n    this.getColumns('').then(x => {\n      this.target.columns = x;\n      this.onChangeInternal()\n    });\n    this.getKeys('').then(x => {\n      this.target.keys = x;\n      this.onChangeInternal()\n    });\n  }\n\n  getKeys(query) {\n    return this.target.mv !== 'Select Materialized View' ? this.datasource.getKeys(query || '', this.target.mv) : [];\n  }\n\n  getKeys2(query) {\n    return Promise.resolve(this.target.keys) || this.getKeys(query)\n  }\n\n  onColumnsChanged() {\n    \n  }\n\n  getColumns2(query) {\n    return Promise.resolve(this.target.columns) || this.getColumns(query)\n  }\n}\n\nGenericDatasourceQueryCtrl.templateUrl = 'partials/query.editor.html';\n\n\n"]}